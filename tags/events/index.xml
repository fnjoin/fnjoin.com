<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>events on fn:join</title><link>https://fnjoin.com/tags/events/</link><description>Recent content in events on fn:join</description><generator>Hugo -- gohugo.io</generator><managingEditor>contact@fnjoin.com (Salman Malik, Archie Cowan)</managingEditor><webMaster>contact@fnjoin.com (Salman Malik, Archie Cowan)</webMaster><lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fnjoin.com/tags/events/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes with Java - Handling Events</title><link>https://fnjoin.com/post/2022-01-03-k8s-event-handling/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2022-01-03-k8s-event-handling/</guid><description>This post is a continuation of Kubernetes with Java - Asynchronous APIs which showed us how to interact with the Kubernetes API to list deployment resources on demand. In this post, we will learn how to handle Kubernetes API events in near real-time.
An example use case for this capability might be to send a notification to a slack channel whenever an app deployment is started or when it finishes and becomes ready to be consumed.</description></item></channel></rss>