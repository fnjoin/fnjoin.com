<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on fn:join</title><link>https://fnjoin.com/tags/java/</link><description>Recent content in java on fn:join</description><generator>Hugo -- gohugo.io</generator><managingEditor>contact@fnjoin.com (Salman Malik, Archie Cowan)</managingEditor><webMaster>contact@fnjoin.com (Salman Malik, Archie Cowan)</webMaster><lastBuildDate>Sat, 11 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fnjoin.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes with Java - running in the cluster</title><link>https://fnjoin.com/post/2021-09-11-running-in-cluster/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-09-11-running-in-cluster/</guid><description>What are we going to do? This post builds on top of Kubernetes with Java - Introduction and Kubernetes with Java - Asynchronous APIs posts which showed us how to interact with the Kubernetes API to list deployment resources and provide an API of our own to list teams and apps belonging to those teams running in the cluster. In this post, we will
Configure a spring-boot app to be able to access the Kubernetes API when running inside a Kubernetes cluster Learn how to package up a spring-boot app into an OCI image (aka Docker image) Configure RBAC with Role, RoleBinding, and ServiceAccount so our spring-boot app has the ability to run with only the Kubernetes APIs that we think it should have access to and nothing more Create Deployment and Service resources to deploy our spring-boot app and expose its API within the cluster Prerequisites Access to source code for the project - https://github.</description></item><item><title>Kubernetes with Java - Asynchronous APIs</title><link>https://fnjoin.com/post/2021-09-08-show-deployments-async/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-09-08-show-deployments-async/</guid><description>What are we going to do? This post builds on top of Kubernetes with Java - Introduction which relied on synchronous Kubernetes API to get information for apps runnings in Kubernetes cluster. In this post, we will
Learn when to use synchronous and when to use asynchronous Kubernetes API mechanisms Learn how to use asynchronous Kubernetes API to exrtact deployments metadata How to use spring-boot profiles to conditionally enable functionality Synchronous vs asynchronous APIs Kubernetes API provides two mechanisms to consume information for the clients.</description></item><item><title>Kubernetes with Java - Introduction</title><link>https://fnjoin.com/post/2021-08-27-show-deployments/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-08-27-show-deployments/</guid><description>What are we going to do? Learn how to initialize the k8s api client in a java spring-boot application Extract metadata from deployments in a namespace and transform that metadata into new views Prepare you for more sophisticated problem solving using the k8s API in future articles Motivation You have a few hundred different applications (as Kubernetes deployment resources) running in your cluster All of those applications use labels to designate the name of the team that manages that application, and the application name You want to provide APIs that: Lists all teams that have applications running in the cluster Lists all apps that belong to a team Scenario Assumption: you have minikube locally and you don&amp;rsquo;t already have a namespace called dev.</description></item></channel></rss>