<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on fn:join</title><link>https://fnjoin.com/tags/java/</link><description>Recent content in java on fn:join</description><generator>Hugo -- gohugo.io</generator><managingEditor>contact@fnjoin.com (Salman Malik, Archie Cowan)</managingEditor><webMaster>contact@fnjoin.com (Salman Malik, Archie Cowan)</webMaster><lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fnjoin.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>10x Faster Spring Boot Startup Times</title><link>https://fnjoin.com/post/2022-03-20-fast-java-startup/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2022-03-20-fast-java-startup/</guid><description>Application based on spring-boot are not known for extremely fast startup times and low memory usage. Most of the time spring-boot apps are meant for long running server processes and we have learned to live with the startup time and higher memory usage because spring-boot solves so many other problems for the developer and speeds up the development process. In other words, we are OK with more developer productivity at the cost of higher resource usage at runtime specially at application startup.</description></item><item><title>Kubernetes with Java - Handling Events</title><link>https://fnjoin.com/post/2022-01-03-k8s-event-handling/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2022-01-03-k8s-event-handling/</guid><description>This post is a continuation of Kubernetes with Java - Asynchronous APIs which showed us how to interact with the Kubernetes API to list deployment resources on demand. In this post, we will learn how to handle Kubernetes API events in near real-time.
An example use case for this capability might be to send a notification to a slack channel whenever an app deployment is started or when it finishes and becomes ready to be consumed.</description></item><item><title>Kubernetes with Java - Creating Images</title><link>https://fnjoin.com/post/2021-11-28-creating-images/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-11-28-creating-images/</guid><description>Building production quality images for Java apps To run a spring-boot app on k8s, you need to create a container image. The images need to be in the Open Container Image format. In this article, we will review how to create OCI images two different ways:
Using a Dockerfile Using Cloud Native Buildpacks Note: The Open Container Image (OCI) format antecedent of the Docker image format as a standard specification.</description></item><item><title>Kubernetes with Java - Running in the Cluster</title><link>https://fnjoin.com/post/2021-09-11-running-in-cluster/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-09-11-running-in-cluster/</guid><description>What are we going to do? This post builds on top of Kubernetes with Java - Introduction and Kubernetes with Java - Asynchronous APIs posts which showed us how to interact with the Kubernetes API to list deployment resources and provide an API of our own to list teams and apps belonging to those teams running in the cluster. In this post, we will
Configure a spring-boot app to be able to access the Kubernetes API when running inside a Kubernetes cluster Learn how to package up a spring-boot app into an OCI image (aka Docker image) Configure RBAC with Role, RoleBinding, and ServiceAccount so our spring-boot app has the ability to run with only the Kubernetes APIs that we think it should have access to and nothing more Create Deployment and Service resources to deploy our spring-boot app and expose its API within the cluster Prerequisites Access to source code for the project - https://github.</description></item><item><title>Kubernetes with Java - Asynchronous APIs</title><link>https://fnjoin.com/post/2021-09-08-show-deployments-async/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-09-08-show-deployments-async/</guid><description>What are we going to do? This post builds on top of Kubernetes with Java - Introduction which relied on synchronous Kubernetes API to get information for apps runnings in Kubernetes cluster. In this post, we will
Learn when to use synchronous and when to use asynchronous Kubernetes API mechanisms Learn how to use asynchronous Kubernetes API to exrtact deployments metadata How to use spring-boot profiles to conditionally enable functionality Synchronous vs asynchronous APIs Kubernetes API provides two mechanisms to consume information for the clients.</description></item><item><title>Kubernetes with Java - Introduction</title><link>https://fnjoin.com/post/2021-08-27-show-deployments/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2021-08-27-show-deployments/</guid><description>What are we going to do? Learn how to initialize the k8s api client in a java spring-boot application Extract metadata from deployments in a namespace and transform that metadata into new views Prepare you for more sophisticated problem solving using the k8s API in future articles Motivation You have a few dozen different applications (as Kubernetes deployment resources) running in your cluster All of those applications use labels to designate the name of the team that manages that application, and the application name You want to provide APIs that: Lists all teams that have applications running in the cluster Lists all apps that belong to a team Scenario Assumption: you have minikube locally and you don&amp;rsquo;t already have a namespace called dev.</description></item></channel></rss>