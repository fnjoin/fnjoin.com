<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on fn:join</title><link>https://fnjoin.com/tags/mysql/</link><description>Recent content in mysql on fn:join</description><generator>Hugo -- gohugo.io</generator><managingEditor>contact@fnjoin.com (Salman Malik, Archie Cowan)</managingEditor><webMaster>contact@fnjoin.com (Salman Malik, Archie Cowan)</webMaster><lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://fnjoin.com/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Controller Pattern Example with Java and MySQL</title><link>https://fnjoin.com/post/2022-11-08-k8s-controller-java/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><author>contact@fnjoin.com (Salman Malik, Archie Cowan)</author><guid>https://fnjoin.com/post/2022-11-08-k8s-controller-java/</guid><description>This post is a continuation of Kubernetes with Java - Handling Events which showed us how to subscribe to API events for a given type of Kubernetes resource and deal with them in near real-time. In this post, we will learn how to use that capability along side other client machinery components to write a Kubernetes controller.
What are we trying to do For this post, our goal is to make it easier to create multiple MySQL database instances in a Kubernetes cluster.</description></item></channel></rss>